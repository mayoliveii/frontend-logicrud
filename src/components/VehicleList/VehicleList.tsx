import { useCallback, useEffect, useState } from 'react';
import apiService, { CategoryData } from '../../apiServices/apiService';
import { Alert, AlertIcon, Button, Center, CircularProgress, CloseButton, Container, Flex, useDisclosure } from '@chakra-ui/react';
import Vehicle from '../Vehicle/Vehicle';
import { Input } from "@chakra-ui/react";
import NotFoundMessage from '../NotFoundMessage/NotFoundMessage';
import { CreateModal } from '../CreateModal/CreateModal';
import "react-datepicker/dist/react-datepicker.css";
import DatePicker from "react-datepicker";
import { FaRegCalendarAlt } from 'react-icons/fa';
import React from 'react';

export interface ModalProps {
  onCategoryAdded?: () => void;
  onCategoryDeleted?: () => void;
  onCategoryUpdated?: () => void;
}

export default function VehicleList() {
  const { isOpen, onOpen, onClose } = useDisclosure();

  const [categories, setCategories] = useState<CategoryData[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [startDate, setStartDate] = useState<Date | null>(null);
  const [endDate, setEndDate] = useState<Date | null>(null);
  const [isDateFilterApplied, setDateFilterApplied] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [showAlert, setShowAlert] = useState(false);

  const fetchCategories = useCallback(async () => {
    setIsLoading(true);
    const timeoutId = setTimeout(() => {
      setShowAlert(true);
    }, 5000); // Mostrar alerta apÃ³s 5 segundos

    try {
      const allCategories = await apiService.getAllCategories({
        orderBy: 'created_at_DESC',
        startDate: startDate ? startDate.toISOString() : undefined,
        endDate: endDate ? endDate.toISOString() : undefined
      });
      clearTimeout(timeoutId);
      setCategories(allCategories);
      setDateFilterApplied(!!startDate || !!endDate);
    } catch (error) {
      clearTimeout(timeoutId);
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  }, [startDate, endDate]);

  useEffect(() => {
    fetchCategories();
  }, [fetchCategories]);

  const updateVehicleList = () => {
    fetchCategories();
  }

  const clearFilters = () => {
    setStartDate(null);
    setEndDate(null);
    setSearchTerm("");
    setDateFilterApplied(false);
  };

  const filteredCategories = categories.filter(
    category =>
      category.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      category.id.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const CustomInput = React.forwardRef<HTMLInputElement, { value?: string, onClick?: () => void, placeholder?: string }>(
    ({ value, onClick, placeholder }, ref) => (
      <div style={{ display: 'flex', alignItems: 'center', position: 'relative' }}>
        <FaRegCalendarAlt style={{ position: 'absolute', left: '10px', top: '15px', color: '#FF7A50' }} />
        <input
          style={{
            padding: '11px',
            paddingLeft: '30px',
            fontSize: '16px',
            borderRadius: '25px',
            border: '1px solid #FF7A50',
            width: '150px'
          }}
          onClick={onClick}
          value={value}
          placeholder={placeholder}
          ref={ref}
        />
      </div>
    )
  );

  return (
    <Container maxW={'5xl'} my={20}>
      {showAlert && isLoading && (
        <Alert status='warning'>
          <AlertIcon />
          Estamos notando um atraso inesperado na resposta do nosso banco de dados.
          Por favor, aguarde mais alguns segundos enquanto carregamos a lista para vocÃª.
          Agradecemos a sua paciÃªncia.
        </Alert>
      )}
      <Flex my={8} align="center" justifyContent="space-between">
        <Button
          size={'lg'}
          fontWeight={'normal'}
          px={6}
          onClick={onOpen}
          colorScheme='orange'
          variant='outline'
        >
          Nova categoria
        </Button>
        <CreateModal isOpen={isOpen} onClose={onClose} onCategoryAdded={updateVehicleList} />

        <div style={{ display: 'flex', alignItems: 'center' }}>
          <div style={{ position: 'relative' }}>
            <DatePicker
              className="myDatePicker"
              placeholderText="Start date"
              selected={startDate}
              onChange={setStartDate}
              selectsStart
              startDate={startDate}
              endDate={endDate}
              onFocus={() => true}
              customInput={<CustomInput />}
            />
          </div>
          <div style={{ position: 'relative', marginLeft: '15px' }}>
            <DatePicker
              className="myDatePicker"
              placeholderText="End date"
              selected={endDate}
              onChange={setEndDate}
              selectsEnd
              startDate={startDate}
              endDate={endDate}
              minDate={startDate}
              onFocus={() => true}
              customInput={<CustomInput />}
            />
          </div>
          <CloseButton size="lg" ml={3} rounded={30} _hover={{ bg: 'orange.100' }}
            onClick={clearFilters} variant={'ghost'} />
        </div>
      </Flex>
      <Input
        placeholder='Pesquisar veÃ­culo por tÃ­tulo ou ID'
        size='md'
        focusBorderColor="#FF7A50"
        value={searchTerm}
        onChange={e => setSearchTerm(e.target.value)}
      />
      {isLoading ? (
        <Center ml={'auto'} h={'50vh'}>
          <CircularProgress isIndeterminate color='orange.500' />
        </Center>
      ) : filteredCategories.length > 0 ? (
        filteredCategories.map(category => (
          <Vehicle key={category.title} category={category} onCategoryDeleted={updateVehicleList} onCategoryUpdated={updateVehicleList} />
        ))
      ) : (isDateFilterApplied || categories.length > 0) ? (
        <NotFoundMessage
          title="Ops! Categoria de veÃ­culo nÃ£o encontrada ðŸ‘€"
          description="A categoria de veÃ­culo que vocÃª tentou acessar nÃ£o estÃ¡ disponÃ­vel em nosso sistema.
    NÃ£o encontramos nenhum registro correspondente ao tÃ­tulo ou ID fornecido.
    Continue explorando nosso sistema para descobrir outras categorias disponÃ­veis."
        />
      ) : (
        <NotFoundMessage
          title="Nenhuma categoria de veÃ­culo cadastrada ðŸ˜°"
          description="NÃ£o hÃ¡ categorias de veÃ­culos disponÃ­veis em nosso sistema no momento. Por favor, adicione uma nova categoria."
        />
      )
      }
    </Container>
  );
}